name: Deploy Flash App to EC2 with Docker

on:
  push:
    branches:
      - main   # Trigger only on main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1   # change to your AWS region

      # 3. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build & Push Docker image to ECR
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flash-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 5. Create/Reuse EC2 Instance
      - name: Create or Reuse EC2
        id: ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=FlashApp" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "Launching new EC2 instance..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0c02fb55956c7d316 \ # Amazon Linux 2 (update AMI for your region)
              --count 1 \
              --instance-type t2.micro \
              --key-name MyKeyPair \
              --security-groups default \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FlashApp}]' \
              --query "Instances[0].InstanceId" \
              --output text)
          else
            echo "Reusing EC2 instance: $INSTANCE_ID"
          fi

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # 6. Install Docker & Run Container on EC2
      - name: Deploy Docker Container on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null
            then
              sudo yum update -y
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            fi

            # Pull latest image from ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            docker pull ${{ steps.login-ecr.outputs.registry }}/flash-app:latest

            # Stop & Remove old container if exists
            docker stop flash-app || true
            docker rm flash-app || true

            # Run new container
            docker run -d --name flash-app -p 80:80 ${{ steps.login-ecr.outputs.registry }}/flash-app:latest
